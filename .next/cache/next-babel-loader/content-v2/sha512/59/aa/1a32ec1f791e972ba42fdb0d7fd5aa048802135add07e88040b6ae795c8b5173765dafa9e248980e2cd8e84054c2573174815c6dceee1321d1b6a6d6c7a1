{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\hipposoft\\\\conradArchitect\\\\pages\\\\projects\\\\[project].js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react'; //TODO: Add components\n\nimport AppContext from '../../components/AppContext';\nimport ProjectDetails from '../../components/projects/project-details';\n\nconst Project = ({\n  projectId\n}) => {\n  _s();\n\n  const {\n    projectsData\n  } = useContext(AppContext);\n  const selectedProject = projectsData.filter(project => project.id === projectId);\n  return /*#__PURE__*/_jsxDEV(ProjectDetails, {\n    project: selectedProject[0]\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Project, \"bDi11o8Qb4qhXf2trUFeH2/9uNY=\");\n\n_c = Project;\nexport var __N_SSG = true;\nexport default Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/hipposoft/conradArchitect/pages/projects/[project].js"],"names":["React","useContext","AppContext","ProjectDetails","Project","projectId","projectsData","selectedProject","filter","project","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC,C,CACA;;AAEA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,cAAP,MAA2B,2CAA3B;;AA4BA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAmBL,UAAU,CAACC,UAAD,CAAnC;AAEA,QAAMK,eAAe,GAAGD,YAAY,CAACE,MAAb,CAAoBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeL,SAA9C,CAAxB;AAEA,sBACI,QAAC,cAAD;AAAgB,IAAA,OAAO,EAAEE,eAAe,CAAC,CAAD;AAAxC;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CARD;;GAAMH,O;;KAAAA,O;;AAUN,eAAeA,OAAf","sourcesContent":["import React, { useContext } from 'react';\r\n//TODO: Add components\r\nimport { getProjects } from '../../API';\r\nimport AppContext from '../../components/AppContext';\r\nimport ProjectDetails from '../../components/projects/project-details';\r\n\r\nexport const getStaticPaths = async () => {\r\n    const res = await getProjects();\r\n    const cleanBlankSpaces = (string) => string.replace(/\\s+/g, '-');\r\n\r\n    return {\r\n        paths: res.map(project => {\r\n            return {\r\n                params: {\r\n                    project: cleanBlankSpaces(project.name),\r\n                },\r\n            };\r\n        }),\r\n        fallback: false //indicates the type of fallback\r\n    }\r\n}\r\n\r\nexport const getStaticProps = async (context) => {\r\n    const projectId = context.params.project;\r\n\r\n    return {\r\n        props: {\r\n            projectId: projectId,\r\n        }\r\n    }\r\n}\r\n\r\nconst Project = ({ projectId }) => {\r\n    const { projectsData } = useContext(AppContext);\r\n\r\n    const selectedProject = projectsData.filter(project => project.id === projectId);\r\n\r\n    return (\r\n        <ProjectDetails project={selectedProject[0]} />\r\n    )\r\n}\r\n\r\nexport default Project;\r\n"]},"metadata":{},"sourceType":"module"}