{"ast":null,"code":"import _defineProperty from \"/Users/diegoborigen/Personal/Projects/ConradArchitect/conradArchitect/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/Users/diegoborigen/Personal/Projects/ConradArchitect/conradArchitect/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/diegoborigen/Personal/Projects/ConradArchitect/conradArchitect/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport AppContext from '../components/AppContext'; //Styles\n\nimport '../css/global-styles.scss';\nimport { getProjects } from '../API';\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n\n  var _useState = useState([]),\n      projects = _useState[0],\n      setProjects = _useState[1];\n\n  useEffect(function () {\n    function fetchProjectsAPI() {\n      return _fetchProjectsAPI.apply(this, arguments);\n    }\n\n    function _fetchProjectsAPI() {\n      _fetchProjectsAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getProjects();\n\n              case 2:\n                response = _context.sent;\n                //response = await response.json()\n                setProjects(response);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchProjectsAPI.apply(this, arguments);\n    }\n\n    fetchProjectsAPI();\n  }, []);\n  return /*#__PURE__*/_jsx(AppContext.Provider, {\n    value: {\n      projectsData: projects\n    },\n    children: /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))\n  });\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}